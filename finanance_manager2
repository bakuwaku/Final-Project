""" Determining financial information regarding a users input.

Driver/Navigator: Shelly Parra, 
Assignment: Project
Date: 11/11/2024

Challenges Encountered: 

class Person:
        """Represents a user of the financial app who can track expenses, income, and savings."""

def __init__(self, username: str):
        """Initializes the financial tracker with user details and empty lists for expenses, income, and savings.

        Args:
            username (str): The username of the person.
        """
    
def register_user(self):
        """Registers a new user by creating an instance if one does not exist.

        Attributes:
            username (str): The username associated with this account.
            expenses (list): A list of expenses associated with the user.
            income (float): The user's income.
            savings (float): The user's total savings.
        """
    
def display_information(self):
        """Displays the financial information of the user."""
        
def want_add_expenses(self, amount: float, category: str):
    """Adds expenses to a list of desired purchases. Used when the person wants to track things they intend to spend money on, such as a new iphone or a trip to Dunkin' Donuts.

    Args:
        amount (float): Amount of money spent on desired expense.
        category (str): Description or category of the expense, such as entertainment or fast food 
        
    Raises:
        AssertionError: If amount is not a positive number or category is an empty string 
        """
    
def need_expenses
    """Adds essential expenses to a list of necessary spending. Used to track money spent on necessities, such as food, utilities, or housing

        Args:
        amount (float): The amount of money spent on necessary expense. 
        category (str): Description or category of the expense, such as "food," "electricity," or "housing."
    
        Raises:
        AssertionError: If amount is not a positive number or category is an empty string.
    """

    def password(self, username: str):
           """Sets a password for the userâ€™s account
                This function will ask the user to create a password and which will be saved to their account. It is then stored
                in the 'password' attribute of the class instance.

    Args:
        None

    Returns:
        None
    """

    # some happy path cases
    assert app.password == 'abc123'
    assert app.password == 'abcd1234'
    
    def calculate_total(self, expenses):
                """ Calculates the total amount from a list of expenses.

    Args:
        expenses (list): A list of expenses.

    Returns:
        float: The total amount of all expenses.
        """

    # some happy path cases

    assert app.expenses = [10.50, 20.75, 5.25]
    assert result = app.calculate_total()
    assert result == 36.50, f"The total amount of expenses is {result}"

    assert app.expenses = [10.50, 0, 5.25]
    assert result = app.calculate_total()
    assert result == 15.75, f"The total amount of expenses is {result}"
